package driver;

import com.jjjwelectronics.Item;
import com.jjjwelectronics.card.Card;
import com.jjjwelectronics.screen.ITouchScreen;
import com.sun.tools.javac.Main;
import managers.SystemManager;
import managers.enums.SessionStatus;
import managers.interfaces.IScreen;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;

// MainScreenForm class represents the main screen of the self-checkout system
public class MainScreenForm implements IScreen {

    // JPanel representing the main screen
    protected JPanel root;

    // SystemManager responsible for managing the self-checkout system
    protected SystemManager sm;

    // ITouchScreen used for interacting with the touchscreen
    protected ITouchScreen tch;

    // Card views
    public final String smf_name = "System Manager Form";
    protected final SystemManagerForm smf;
    public final String landing_name = "Landing Screen";
    protected final LandingPage lp;

    // GUI initializer generated by IntelliJ IDEA GUI Designer
    {
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new CardLayout(0, 0));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    // Constructor that takes a SystemManager as a parameter
    public MainScreenForm(SystemManager sm) {
        this.sm = sm;

        // Listening for events emitted from the system manager
        sm.attach(this);

        // Creating the system manager form and landing page
        smf = new SystemManagerForm(sm);
        lp = new LandingPage(sm);

        // Adding cards to the root panel
        root.add(smf.getPanel(), smf_name);
        root.add(lp.getPanel(), landing_name);
    }

    // Method to get the JPanel associated with this MainScreenForm
    @Override
    public JPanel getPanel() {
        return root;
    }

    // Method to get the JFrame associated with this MainScreenForm
    @Override
    public JFrame getFrame() {
        // MainScreenForm does not have a JFrame, so UnsupportedOperationException is thrown
        throw new UnsupportedOperationException("This object does not have a JFrame");
    }

    // Method to configure the MainScreenForm with an ITouchScreen
    @Override
    public void configure(ITouchScreen touchScreen) {
        // Saving a reference to the ITouchScreen
        tch = touchScreen;

        // Updating the touch screen's content pane
        touchScreen.getFrame().setContentPane(root);

        // Configuring the SystemManagerForm and LandingPage
        smf.configure(touchScreen);
        lp.configure(touchScreen);

        // Logic to change views when the "Start Session" button is clicked
        lp.getStartSessionButton().addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Switching the main view to SystemManagerForm
                CardLayout layout = (CardLayout) root.getLayout();
                layout.show(root, smf_name);
            }
        });

        // Switching views initially to LandingPage
        CardLayout layout = (CardLayout) root.getLayout();
        layout.show(root, landing_name);
    }

    // Method to handle notifications about changes in the session status
    @Override
    public void notifyStateChange(SessionStatus state) {
        switch (state) {
            case NORMAL -> {
                // TODO: Implement logic for NORMAL state
            }
            case BLOCKED -> {
                // TODO: Implement logic for BLOCKED state
            }
            case PAID -> {
                // TODO: Implement logic for PAID state
            }
            case DISABLED -> {
                // Handling the DISABLED state
                handleDisabled();
            }
        }
    }

    // Method to handle the DISABLED state
    protected void handleDisabled() {
        // TODO: Implement the logic for handling the DISABLED state
    }

    // Remaining notification methods that do nothing in this class
    @Override
    public void notifyItemAdded(Item item) {
        // do nothing with this event
    }

    @Override
    public void notifyItemRemoved(Item item) {
        // do nothing with this event
    }

    @Override
    public void notifyRefresh() {
        // do nothing with this event
    }

    @Override
    public void notifyPaymentAdded(BigDecimal value) {
        // do nothing with this event
    }

    @Override
    public void notifyPaymentWindowClosed() {
        // do nothing with this event
    }

    @Override
    public void notifyInvalidCardRead(Card card) {
        // do nothing with this event
    }
}
